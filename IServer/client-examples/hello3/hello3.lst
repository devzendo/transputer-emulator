DevZendo.org Macro Assembler 0.0.2-SNAPSHOT                                                                      20/12/2022 20:33:23
Transputer Hello World                                                                                                    Page 1 - 6
                      TITLE Transputer Hello World
                      
                      PAGE 60,132
                      
                      ; Third version without macros. Uses the IServer protocol.
                      
                      .TRANSPUTER
 = 80000070           MemStart    EQU 0x80000070
 = 80000024           TptrLoc0    EQU 0x80000024
 = 80000028           TptrLoc1    EQU 0x80000028
                      
 = 0000               start_time  EQU 0
                      
 = 8000006F           ORG         MemStart - 1
 8000006F D8          DB          STOP - START
 = 80000070           ORG         MemStart
                      
                      ; Standard Transputer startup code.
                      
 80000070             START:
 80000070 24 F2       mint                        ; load A with NotProcess.p = mint = 0x80000000
 80000072 21 F8       sthf                        ; initialize high priority queue front pointer
 80000074 24 F2       mint                        ; load A with NotProcess.p
 80000076 21 FC       stlf                        ; initialize low priority process queue pointer
                      ; This must be done before starting any processes or attempting any message passing.
                      ; Because of the way queues are implemented there is no need to initialise the back
                      ; pointers.
                      ; CWG p75
                      
 80000078 24 F2       mint                        ; load A with NotProcess.p
 8000007A 67 20 20 20 ldc     TPtrLoc0            ; load high priority timer queue pointer offset
 8000007E 20 20 22 44
 80000082 E0          stnl    0                   ; initialize high priority timer queue
 80000083 24 F2       mint                        ; load A with NotProcess.p
 80000085 67 20 20 20 ldc     TPtrLoc1            ; load low priority timer queue pointer offset
 80000089 20 20 22 48
 8000008D E0          stnl    0                   ; initialize high priority timer queue
                      ; This must be done before any attempt to wait on the timer. Also before using the
                      ; clock at any priority level, the timer must be started...
                      
 8000008E 40          ldc     start_time          ; load time to initialize clocks at (usually zero)
 8000008F 25 F4       sttimer                     ; start the clocks
                      
 80000091 22 F9       testerr                     ; clears the Error flag and HaltOnError flag
 80000093 25 F7       clrhalterr                  ; or use sethalterr here depending what you want
                      
 80000095 29 FC       fptesterr                   ; Reset floating point error flag and set rounding mode to Round-to-Nearest
                      
 80000097 24 F2       mint                        ; load A with NotProcess.p
 80000099 67 20 20 20 ldc     0x80000020          ; load address of Event channel
 8000009D 20 20 22 40
 800000A1 E0          stnl    0                   ; store NotProcess.p to Event channel
 800000A2 24 F2       mint                        ; load A with NotProcess.p
 800000A4 67 20 20 20 ldc     0x8000001C          ; load address of Link 3 input channel
 800000A8 20 20 21 4C
 800000AC E0          stnl    0                   ; store NotProcess.p to Link 3 input channel
 800000AD 24 F2       mint                        ; load A with NotProcess.p
 800000AF 67 20 20 20 ldc     0x80000018          ; load address of Link 2 input channel
DevZendo.org Macro Assembler 0.0.2-SNAPSHOT                                                                      20/12/2022 20:33:23
Transputer Hello World                                                                                                    Page 2 - 6
 800000B3 20 20 21 48
 800000B7 E0          stnl    0                   ; store NotProcess.p to Link 2 input channel
 800000B8 24 F2       mint                        ; load A with NotProcess.p
 800000BA 67 20 20 20 ldc     0x80000014          ; load address of Link 1 input channel
 800000BE 20 20 21 44
 800000C2 E0          stnl    0                   ; store NotProcess.p to Link 1 input channel
 800000C3 24 F2       mint                        ; load A with NotProcess.p
 800000C5 67 20 20 20 ldc     0x80000010          ; load address of Link 0 input channel
 800000C9 20 20 21 40
 800000CD E0          stnl    0                   ; store NotProcess.p to Link 0 input channel
 800000CE 24 F2       mint                        ; load A with NotProcess.p
 800000D0 67 20 20 20 ldc     0x8000000C          ; load address of Link 3 output channel
 800000D4 20 20 20 4C
 800000D8 E0          stnl    0                   ; store NotProcess.p to Link 3 output channel
 800000D9 24 F2       mint                        ; load A with NotProcess.p
 800000DB 67 20 20 20 ldc     0x80000008          ; load address of Link 2 output channel
 800000DF 20 20 20 48
 800000E3 E0          stnl    0                   ; store NotProcess.p to Link 2 output channel
 800000E4 24 F2       mint                        ; load A with NotProcess.p
 800000E6 67 20 20 20 ldc     0x80000004          ; load address of Link 1 output channel
 800000EA 20 20 20 44
 800000EE E0          stnl    0                   ; store NotProcess.p to Link 1 output channel
 800000EF 24 F2       mint                        ; load A with NotProcess.p
 800000F1 67 20 20 20 ldc     0x80000000          ; load address of Link 0 output channel
 800000F5 20 20 20 40
 800000F9 E0          stnl    0                   ; store NotProcess.p to Link 0 output channel
                      
                      
                      
 800000FA 0D          j       MAIN
                      
 = 0100               NSS_CONSOLE     EQU 0x0100
 = 0101               CONSOLE_PUT_PSTR    EQU NSS_CONSOLE OR 0x01
 = 80000000           LINK0_OUTPUT    EQU 0x80000000
 = 80000010           LINK0_INPUT     EQU 0x80000010
                      
                      
 800000FB             HWSTR:
 800000FB 68 65 6C 6C DB      "hello world", 0x0a, 0x00 ; length 13
 800000FF 6F 20 77 6F
 80000103 72 6C 64 0A
 80000107 00
                      
 80000108             MAIN:
 80000108 21 20 B0    ajw     0x100    ; allow for 64 stack frames
                      
 8000010B 61 4C       ldc     HWSTR - _M1
 8000010D 21 FB       ldpi
 8000010F             _M1:
                      ; call putConsolePString
                      ; a=800000FB (HWSTR), b=00000001 (irrelevant)
 8000010F 92          call    putConsolePString
                      
                      ; W 4 [80000158]=8000010D
                      ; W 4 [8000015C]=800000FB (HWSTR)
                      ; W 4 [80000160]=00000001
                      ; W 4 [80000164]=80000000
                      
DevZendo.org Macro Assembler 0.0.2-SNAPSHOT                                                                      20/12/2022 20:33:23
Transputer Hello World                                                                                                    Page 3 - 6
 80000110             FIN:
 80000110 2C F2       terminate
                      
                      ; Stack effect notation used here:
                      ; fun(a=A, b=B, c=C): (a=A', b=B', c=C')
                      ; a, b, c are the three registers; A, B, C are their initial contents.
                      ; A', B', C' are their return values (which may be A, B, C if these are still on the stack).
                      ; Return values can be denoted as 'useless' indicating some internal value that's not useful to the caller.
                      
                      ; putConsolePString(a=string address, b=B, c=C): (a=, b=, c=)
                      ; Precondition: string is <= 255 bytes long. Only a single protocol frame will be sent to the server; If the s
                      ; is longer, this function could issue several frames for each segment. A future version could..
                      ; If the string is empty, no frame is emitted.
 80000112             putConsolePString:
 = 0002               PPS_WLEN        EQU 2
                      
 = 0000               PPS_STRINGADDR  EQU 0
 = 0001               PPS_STRINGLEN   EQU 1
                      
                      ; before call, w=80000169
                      ; now this routine has been called, here, w=80000159
 80000112 60 BE       ajw     -PPS_WLEN
                      ; now w=80000151
                      
                      ; the call generates the following return stack
                      ; DEBUG memory.cpp:281 W 4 [80000158]=8000010D (return address)
                      ; DEBUG memory.cpp:281 W 4 [8000015C]=800000FB (old a, the string address)
                      ; DEBUG memory.cpp:281 W 4 [80000160]=00000001 (old b)
                      ; DEBUG memory.cpp:281 W 4 [80000164]=80000000 (old c)
                      ; get the old areg (string address) off the return stack
 80000114 73          ldl     0x03
                      ; 5 gets w+5word => 80000150+14 => 80000164 (old c)
                      ; 4 gets w+4word => 80000150+10 => 80000160 (old b)
                      ; 3 gets w+3word => 80000150+C = 8000015C (which is old a, the string address, which we want)
                      ; 2 gets w+2word => 80000150+8 = 80000158 (the return address)
                      
                      ; idea for later, store CONSOLE_PUT_PSTR then the length next to each other in the workspace, then out them as
                      ; message (LSB of the length will be next to the CONSOLE_PUT_PSTR), then the string text, so we have two outpu
                      ; rather than the three we have at the moment....?
                      
                      ; Store the string pointer for later
 80000115 25 FA       dup
                      ; (a=string address, b=string address, c=B)
 80000117 D0          stl     PPS_STRINGADDR
                      ; (a=string address, b=B, c=B)
                      
 80000118 21 9C       call    strlen
                      
                      ; (a=length, b=useless, c=useless)
 8000011A 25 FA       dup
                      ; (a=length, b=length, c=useless)
 8000011C D1          stl     PPS_STRINGLEN
                      ; (a=length, b,c=useless)
                      
                      ; Empty string?
 8000011D 21 A5       cj      _PPS_END
                      
                      ; (a,b,c=useless)
DevZendo.org Macro Assembler 0.0.2-SNAPSHOT                                                                      20/12/2022 20:33:23
Transputer Hello World                                                                                                    Page 4 - 6
                      
                      ; Output CONSOLE_PUT_PSTR word
 8000011F 67 20 20 20 ldc     LINK0_OUTPUT
 80000123 20 20 20 40
                      ; (a=LINK0_OUTPUT, b,c=useless)
 80000127 21 20 41    ldc     CONSOLE_PUT_PSTR
                      ; (a=CONSOLE_PUT_PSTR, b=LINK0_OUTPUT, c=useless)
 8000012A FF          outword     ; CONSOLE_PUT_PSTR WORD32 -->
                      ; (a=CONSOLE_PUT_PSTR, b=LINK0_OUTPUT, c=useless)
                      
                      ; Output length byte
 8000012B 27 F9       pop
                      ; (a=LINK0_OUTPUT, b=useless, c=CONSOLE_PUT_PSTR)
 8000012D 71          ldl     PPS_STRINGLEN
                      ; (a=string length, b=LINK0_OUTPUT, c=useless)
 8000012E FE          outbyte     ; string length BYTE -->
                      ; (a=string length, b=LINK0_OUTPUT, c=useless)
                      
                      ; WANT:
                      ; (a=string length; b=LINK0_OUTPUT, c=string address)
                      
 8000012F 70          ldl     PPS_STRINGADDR
                      ; (a=string address; b=string length; c=LINK0_OUTPUT)
 80000130 27 F9       pop
                      ; (a=string length; b=LINK0_OUTPUT; c=string_address)
 80000132 FB          out
                      ; (a=string length; b=LINK0_OUTPUT; c=string_address)
                      
 80000133             _PPS_END:
                      ; Empty string => (a=length, b=useless, c=useless)
 80000133 B2          ajw     PPS_WLEN
 80000134 22 F0       ret
                      
                      
                      
 80000136             strlen: ; look, no workspace!! all registers!
                      
                      ; get the old areg (string address) off the return stack
                      ; this routine is workspace free, so no ajw....
 80000136 71          ldl     0x01
                      
                      ; strlen(a=string address, b=B, c=C): (a=length, b=useless, c=useless)
 80000137 40          ldc     0
                      ; (a=length (0), b=string address, c=B)
 80000138             _sl_loop:
 80000138 F0          rev
                      ; (a=string address, b=length, c=B or length [undefined])
 80000139 25 FA       dup
                      ; (a=string address, b=string address, c=length)
 8000013B F1          lb
                      ; (a=char, b=string address, c=length)
 8000013C A5          cj      _sl_end
                      
                      ; (a=string address, b=length, c=length [undefined])
                      ; not end of string
 8000013D 81          adc     1
                      ; (a=string address+1, b=length, c=length [undefined])
 8000013E F0          rev
DevZendo.org Macro Assembler 0.0.2-SNAPSHOT                                                                      20/12/2022 20:33:23
Transputer Hello World                                                                                                    Page 5 - 6
                      ; (a=length, b=string address+1, c=length [undefined])
 8000013F 81          adc     1
                      ; (a=length+1, b=string address+1, c=length [undefined])
 80000140 60 06       j       _sl_loop
                      
 80000142             _sl_end:
                      ; (a=char, b=string address, c=length)
 80000142 27 F9       pop
                      ; (a=string address, b=length, c=char)
 80000144 27 F9       pop
                      ; (a=length, b=char, c=string address)
 80000146 22 F0       ret
                      
                      
 80000148             STOP:
                      END










































DevZendo.org Macro Assembler 0.0.2-SNAPSHOT                                                                      20/12/2022 20:33:23
Transputer Hello World                                                                                                    Page 6 - 6
Symbol Table - by Name
CONSOLE_PUT_PSTR     00000101
FIN                  80000110
HWSTR                800000FB
LINK0_INPUT          80000010
LINK0_OUTPUT         80000000
MAIN                 80000108
MEMSTART             80000070
NSS_CONSOLE          00000100
PPS_STRINGADDR       00000000
PPS_STRINGLEN        00000001
PPS_WLEN             00000002
PUTCONSOLEPSTRING    80000112
START                80000070
START_TIME           00000000
STOP                 80000148
STRLEN               80000136
TPTRLOC0             80000024
TPTRLOC1             80000028
_M1                  8000010F
_PPS_END             80000133
_SL_END              80000142
_SL_LOOP             80000138

Symbol Table - by Address
LINK0_OUTPUT         80000000
LINK0_INPUT          80000010
TPTRLOC0             80000024
TPTRLOC1             80000028
MEMSTART             80000070
START                80000070
HWSTR                800000FB
MAIN                 80000108
_M1                  8000010F
FIN                  80000110
PUTCONSOLEPSTRING    80000112
_PPS_END             80000133
STRLEN               80000136
_SL_LOOP             80000138
_SL_END              80000142
STOP                 80000148
PPS_STRINGADDR       00000000
START_TIME           00000000
PPS_STRINGLEN        00000001
PPS_WLEN             00000002
NSS_CONSOLE          00000100
CONSOLE_PUT_PSTR     00000101











