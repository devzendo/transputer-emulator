DevZendo.org Macro Assembler 0.0.2-SNAPSHOT                                                                      09/08/2023 09:52:55
Transputer Hello World                                                                                                    Page 1 - 6
                      TITLE Transputer Hello World
                      
                      PAGE 60,132
                      
                      ; Third version without macros. Uses the IServer protocol.
                      
                      .TRANSPUTER
 = 80000070           MemStart    EQU 0x80000070
 = 00F3               MemLength   EQU MemStop - MemStart
 = 80000024           TptrLoc0    EQU 0x80000024
 = 80000028           TptrLoc1    EQU 0x80000028
                      
 = 0000               start_time  EQU 0
                      
 = 8000006F           ORG         MemStart - 1
 8000006F F3          DB          MemLength
 = 80000070           ORG         MemStart
                      
                      ; Standard Transputer startup code.
                      
 80000070 24 F2       mint                        ; load A with NotProcess.p = mint = 0x80000000
 80000072 21 F8       sthf                        ; initialize high priority queue front pointer
 80000074 24 F2       mint                        ; load A with NotProcess.p
 80000076 21 FC       stlf                        ; initialize low priority process queue pointer
                      ; This must be done before starting any processes or attempting any message passing.
                      ; Because of the way queues are implemented there is no need to initialise the back
                      ; pointers.
                      ; CWG p75
                      
 80000078 24 F2       mint                        ; load A with NotProcess.p
 8000007A 67 20 20 20 ldc     TPtrLoc0            ; load high priority timer queue pointer offset
 8000007E 20 20 22 44
 80000082 E0          stnl    0                   ; initialize high priority timer queue
 80000083 24 F2       mint                        ; load A with NotProcess.p
 80000085 67 20 20 20 ldc     TPtrLoc1            ; load low priority timer queue pointer offset
 80000089 20 20 22 48
 8000008D E0          stnl    0                   ; initialize high priority timer queue
                      ; This must be done before any attempt to wait on the timer. Also before using the
                      ; clock at any priority level, the timer must be started...
                      
 8000008E 40          ldc     start_time          ; load time to initialize clocks at (usually zero)
 8000008F 25 F4       sttimer                     ; start the clocks
                      
 80000091 22 F9       testerr                     ; clears the Error flag and HaltOnError flag
 80000093 25 F7       clrhalterr                  ; or use sethalterr here depending what you want
                      
 80000095 29 FC       fptesterr                   ; Reset floating point error flag and set rounding mode to Round-to-Nearest
                      
 80000097 24 F2       mint                        ; load A with NotProcess.p
 80000099 67 20 20 20 ldc     0x80000020          ; load address of Event channel
 8000009D 20 20 22 40
 800000A1 E0          stnl    0                   ; store NotProcess.p to Event channel
 800000A2 24 F2       mint                        ; load A with NotProcess.p
 800000A4 67 20 20 20 ldc     0x8000001C          ; load address of Link 3 input channel
 800000A8 20 20 21 4C
 800000AC E0          stnl    0                   ; store NotProcess.p to Link 3 input channel
 800000AD 24 F2       mint                        ; load A with NotProcess.p
 800000AF 67 20 20 20 ldc     0x80000018          ; load address of Link 2 input channel
DevZendo.org Macro Assembler 0.0.2-SNAPSHOT                                                                      09/08/2023 09:52:55
Transputer Hello World                                                                                                    Page 2 - 6
 800000B3 20 20 21 48
 800000B7 E0          stnl    0                   ; store NotProcess.p to Link 2 input channel
 800000B8 24 F2       mint                        ; load A with NotProcess.p
 800000BA 67 20 20 20 ldc     0x80000014          ; load address of Link 1 input channel
 800000BE 20 20 21 44
 800000C2 E0          stnl    0                   ; store NotProcess.p to Link 1 input channel
 800000C3 24 F2       mint                        ; load A with NotProcess.p
 800000C5 67 20 20 20 ldc     0x80000010          ; load address of Link 0 input channel
 800000C9 20 20 21 40
 800000CD E0          stnl    0                   ; store NotProcess.p to Link 0 input channel
 800000CE 24 F2       mint                        ; load A with NotProcess.p
 800000D0 67 20 20 20 ldc     0x8000000C          ; load address of Link 3 output channel
 800000D4 20 20 20 4C
 800000D8 E0          stnl    0                   ; store NotProcess.p to Link 3 output channel
 800000D9 24 F2       mint                        ; load A with NotProcess.p
 800000DB 67 20 20 20 ldc     0x80000008          ; load address of Link 2 output channel
 800000DF 20 20 20 48
 800000E3 E0          stnl    0                   ; store NotProcess.p to Link 2 output channel
 800000E4 24 F2       mint                        ; load A with NotProcess.p
 800000E6 67 20 20 20 ldc     0x80000004          ; load address of Link 1 output channel
 800000EA 20 20 20 44
 800000EE E0          stnl    0                   ; store NotProcess.p to Link 1 output channel
 800000EF 24 F2       mint                        ; load A with NotProcess.p
 800000F1 67 20 20 20 ldc     0x80000000          ; load address of Link 0 output channel
 800000F5 20 20 20 40
 800000F9 E0          stnl    0                   ; store NotProcess.p to Link 0 output channel
                      
                      
                      
 800000FA 0C          j       MAIN
                      
 = 000F               REQ_PUTS        EQU 0x0f
 = 0001               STDOUT_STREAMID EQU 0x01
 = 80000000           LINK0_OUTPUT    EQU 0x80000000
 = 80000010           LINK0_INPUT     EQU 0x80000010
                      
                      
 800000FB             HWSTR:
 800000FB 68 65 6C 6C DB      "hello world", 0x00 ; length 11
 800000FF 6F 20 77 6F
 80000103 72 6C 64 00
                      
 80000107             MAIN:
 80000107 21 20 B0    ajw     0x100    ; allow for 64 stack frames
                      
 8000010A 61 4D       ldc     HWSTR - _M1
 8000010C 21 FB       ldpi
 8000010E             _M1:
                      
                      ; a=800000FB (HWSTR), b=00000001 (irrelevant)
 8000010E 92          call    putConsolePString
 8000010F 2C F2       terminate
                      
                      ; Stack effect notation used here:
                      ; fun(a=A, b=B, c=C): (a=A', b=B', c=C')
                      ; a, b, c are the three registers; A, B, C are their initial contents.
                      ; A', B', C' are their return values (which may be A, B, C if these are still on the stack).
                      ; Return values can be denoted as 'useless' indicating some internal value that's not useful to the caller.
DevZendo.org Macro Assembler 0.0.2-SNAPSHOT                                                                      09/08/2023 09:52:55
Transputer Hello World                                                                                                    Page 3 - 6
                      
                      ; putConsolePString(a=string address, b=B, c=C): (a=, b=, c=)
                      ; Precondition: string is <= 255 bytes long. Only a single protocol frame will be sent to the server; If the s
                      ; is longer, this function could issue several frames for each segment. A future version could..
                      ; If the string is empty, no frame is emitted.
 80000111             putConsolePString:
 = 0002               PCPS_WLEN       EQU 2
                      
 = 0000               PPS_STRINGADDR  EQU 0
 = 0001               PPS_STRINGLEN   EQU 1
                      
 80000111 60 BE       ajw     -PCPS_WLEN
                      
                      ; Workspace following call here...
                      ; 5 => (old c)
                      ; 4 => (old b)
                      ; 3 => (which is old a, the string address, which we want)
                      ; 2 => (the return address)
                      ; 1 => PPS_STRINGLEN
                      ; 0 => PPS_STRINGADDR
                      ; get the old areg (string address) off the return stack
 = 0003               WS_STR_ADDR EQU 0x03
                      
 80000113 73          ldl     WS_STR_ADDR
                      ; (a=string address)
                      
                      ; Store the string pointer for later
 80000114 25 FA       dup
                      ; (a=string address, b=string address)
 80000116 D0          stl     PPS_STRINGADDR   ; TODO don't need a separate WS element for this, it's at 0x03
                      ; (a=string address)
                      
 80000117 23 98       call    strlen
                      ; (a=len)
                      
 80000119 25 FA       dup
                      ; (a=len, b=len)
 8000011B D1          stl     PPS_STRINGLEN
                      ; (a=len)
                      
                      ; Frame length is 2 bytes (a short), then the data for the frame itself:
                      ; 1 byte for frame type (REQ_PUTS)
                      ; 4 bytes for stream id 0
                      ; 2 bytes (short) for string length
                      ; then <len> bytes of string.
                      ; So, frame length is 7 + <len>. (The whole transmission includes the frame length short, so would be 9 + <len
                      ; By chance our message has an odd length, so the whole frame will have an even length.
 8000011C 87          adc     7
                      ; (a=frame length)
 8000011D 22 94       call    outshort0
                      ; ()
                      
                      ; Output REQ_PUTS byte
 8000011F 67 20 20 20 ldc     LINK0_OUTPUT
 80000123 20 20 20 40
                      ; (a=LINK0_OUTPUT)
 80000127 4F          ldc     REQ_PUTS
                      ; (a=REQ_PUTS, b=LINK0_OUTPUT)
DevZendo.org Macro Assembler 0.0.2-SNAPSHOT                                                                      09/08/2023 09:52:55
Transputer Hello World                                                                                                    Page 4 - 6
 80000128 FE          outbyte
                      ; ()
                      
                      ; Output Stdout stream id word32
 80000129 67 20 20 20 ldc     LINK0_OUTPUT
 8000012D 20 20 20 40
                      ; (a=LINK0_OUTPUT)
 80000131 41          ldc     STDOUT_STREAMID
                      ; (a=STDOUT_STREAMID, b=LINK0_OUTPUT)
 80000132 FF          outword
                      ; ()
                      
                      ; Output length word16
 80000133 71          ldl     PPS_STRINGLEN
                      ; (a=string length)
 80000134 9E          call    outshort0
                      ; ()
                      
                      ; Output string data
 80000135 70          ldl     PPS_STRINGADDR
 80000136 67 20 20 20 ldc     LINK0_OUTPUT
 8000013A 20 20 20 40
 8000013E 71          ldl     PPS_STRINGLEN
                      ; (a=string length; b=LINK0_OUTPUT, c=string address)
 8000013F FB          out
                      ; ()
                      
 80000140 B2          ajw     PCPS_WLEN
 80000141 22 F0       ret
                      
                      ; Output the LSB and MSB of a short word to LINK0_OUTPUT.
                      ; (a=short word): ()
 80000143             outshort0:
                      ; Workspace following call here...
                      ; 3 => (old c)
                      ; 2 => (old b)
                      ; 1 => (old a=short word)
                      ; 0 => (the return address)
 = 0001               WSOS0_WORD EQU 0x01
                      
 80000143 67 20 20 20 ldc     LINK0_OUTPUT
 80000147 20 20 20 40
                      ; (a=link address)
 8000014B 11          ldlp    WSOS0_WORD
                      ; (a=address of short word, b=link address)
 8000014C F0          rev
                      ; (a=link address, b=address of short word)
 8000014D 42          ldc     2
                      ; (a=length=2, b=link address, c=address of short word)
 8000014E FB          out
 8000014F 22 F0       ret
                      
                      ; strlen(a=string address): (a=length)
 80000151             strlen: ; look, no workspace!! all registers!
                      
                      ; get the old areg (string address) off the return stack
                      ; this routine is workspace free, so no ajw....
 80000151 71          ldl     0x01
DevZendo.org Macro Assembler 0.0.2-SNAPSHOT                                                                      09/08/2023 09:52:55
Transputer Hello World                                                                                                    Page 5 - 6
                      
 80000152 40          ldc     0
                      ; (a=length (0), b=string address)
 80000153             _sl_loop:
 80000153 F0          rev
                      ; (a=string address, b=length)
 80000154 25 FA       dup
                      ; (a=string address, b=string address, c=length)
 80000156 F1          lb
                      ; (a=char, b=string address, c=length)
 80000157 A5          cj      _sl_end
                      
                      ; (a=string address, b=length)
                      ; not end of string
 80000158 81          adc     1
                      ; (a=string address+1, b=length)
 80000159 F0          rev
                      ; (a=length, b=string address+1)
 8000015A 81          adc     1
                      ; (a=length+1, b=string address+1)
 8000015B 60 06       j       _sl_loop
                      
 8000015D             _sl_end:
                      ; (a=char, b=string address, c=length)
 8000015D 27 F9       pop
                      ; (a=string address, b=length, c=char)
 8000015F 27 F9       pop
                      ; (a=length, b=char, c=string address)
 80000161 22 F0       ret
                      
 80000163             MemStop:
                      END


























DevZendo.org Macro Assembler 0.0.2-SNAPSHOT                                                                      09/08/2023 09:52:55
Transputer Hello World                                                                                                    Page 6 - 6
Symbol Table - by Name
HWSTR                800000FB
LINK0_INPUT          80000010
LINK0_OUTPUT         80000000
MAIN                 80000107
MEMLENGTH            000000F3
MEMSTART             80000070
MEMSTOP              80000163
OUTSHORT0            80000143
PCPS_WLEN            00000002
PPS_STRINGADDR       00000000
PPS_STRINGLEN        00000001
PUTCONSOLEPSTRING    80000111
REQ_PUTS             0000000F
START_TIME           00000000
STDOUT_STREAMID      00000001
STRLEN               80000151
TPTRLOC0             80000024
TPTRLOC1             80000028
WSOS0_WORD           00000001
WS_STR_ADDR          00000003
_M1                  8000010E
_SL_END              8000015D
_SL_LOOP             80000153

Symbol Table - by Address
LINK0_OUTPUT         80000000
LINK0_INPUT          80000010
TPTRLOC0             80000024
TPTRLOC1             80000028
MEMSTART             80000070
HWSTR                800000FB
MAIN                 80000107
_M1                  8000010E
PUTCONSOLEPSTRING    80000111
OUTSHORT0            80000143
STRLEN               80000151
_SL_LOOP             80000153
_SL_END              8000015D
MEMSTOP              80000163
PPS_STRINGADDR       00000000
START_TIME           00000000
WSOS0_WORD           00000001
PPS_STRINGLEN        00000001
STDOUT_STREAMID      00000001
PCPS_WLEN            00000002
WS_STR_ADDR          00000003
REQ_PUTS             0000000F
MEMLENGTH            000000F3









